import json
import os
from datetime import datetime, timedelta
from typing import Dict, Optional
from bot.utils.logger import logger


class SessionManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ—Ñ–∏–ª–ª–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏"""
    
    def __init__(self, session_name: str):
        self.session_name = session_name
        self.session_file = f"sessions/{session_name}_session.json"
        self._ensure_sessions_directory()
        self.data = self._load_session_data()
    
    def _ensure_sessions_directory(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é sessions –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        os.makedirs("sessions", exist_ok=True)
    
    def _load_session_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.session_file):
            return self._create_default_session_data()
        
        try:
            with open(self.session_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return data
        except Exception as e:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏: {e}")
            return self._create_default_session_data()
    
    def _create_default_session_data(self) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'next_ranked_refill_cost': 60,
            'next_unranked_refill_cost': 60,
            'total_gems_spent_today': 0,
            'last_activity_check': None,
            'can_mutate': True
        }
    
    def save_session_data(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(self.session_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏: {e}")
    
    def get_next_ranked_refill_cost(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ—Ñ–∏–ª–ª–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏"""
        return self.data.get('next_ranked_refill_cost', 60)
    
    def get_next_unranked_refill_cost(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ—Ñ–∏–ª–ª–∞ –æ–±—ã—á–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏"""
        return self.data.get('next_unranked_refill_cost', 60)
    
    def update_refill_costs_from_profile(self, profile: Dict) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—Ñ–∏–ª–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è API"""
        ranked_cost = profile.get('refill_price_ranked_gems')
        unranked_cost = profile.get('refill_price_unranked_gems')
        
        if ranked_cost is not None:
            self.data['next_ranked_refill_cost'] = ranked_cost
            
        if unranked_cost is not None:
            self.data['next_unranked_refill_cost'] = unranked_cost
            
        if ranked_cost is not None or unranked_cost is not None:
            self.save_session_data()
            logger.debug(f"{self.session_name} | –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ—Ñ–∏–ª–æ–≤ –∏–∑ API: ranked={ranked_cost}, unranked={unranked_cost}")
    
    def record_ranked_refill(self) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ä–µ—Ñ–∏–ª–ª —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏"""
        current_cost = self.get_next_ranked_refill_cost()
        self.data['total_gems_spent_today'] += current_cost
        self.save_session_data()
        logger.info(f"{self.session_name} | üí∞ –†–µ—Ñ–∏–ª–ª —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏: {current_cost} –≥–µ–º–æ–≤")
    
    def record_unranked_refill(self) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ä–µ—Ñ–∏–ª–ª –æ–±—ã—á–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏"""
        current_cost = self.get_next_unranked_refill_cost()
        self.data['total_gems_spent_today'] += current_cost
        self.save_session_data()
        logger.info(f"{self.session_name} | üí∞ –†–µ—Ñ–∏–ª–ª –æ–±—ã—á–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏: {current_cost} –≥–µ–º–æ–≤")
    
    def can_afford_next_ranked_refill(self, current_gems: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≥–µ–º–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ—Ñ–∏–ª–ª–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏"""
        return current_gems >= self.get_next_ranked_refill_cost()
    
    def can_afford_next_unranked_refill(self, current_gems: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≥–µ–º–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ—Ñ–∏–ª–ª–∞ –æ–±—ã—á–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏"""
        return current_gems >= self.get_next_unranked_refill_cost()
    
    def get_gems_needed_for_next_ranked_refill(self, current_gems: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–º–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ—Ñ–∏–ª–ª–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏"""
        cost = self.get_next_ranked_refill_cost()
        return max(0, cost - current_gems)
    
    def set_mutation_available(self, available: bool) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏"""
        self.data['can_mutate'] = available
        self.save_session_data()
    
    def can_mutate_now(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –º—É—Ç–∞—Ü–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç"""
        return self.data.get('can_mutate', True)
    
    def update_activity_check_time(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        self.data['last_activity_check'] = datetime.now().isoformat()
        self.save_session_data()
    
    def get_session_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        return {
            'total_gems_spent_today': self.data.get('total_gems_spent_today', 0),
            'next_ranked_refill_cost': self.get_next_ranked_refill_cost(),
            'next_unranked_refill_cost': self.get_next_unranked_refill_cost()
        }