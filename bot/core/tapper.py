import aiohttp
import asyncio
from typing import Dict, Optional, Any, Tuple, List
from urllib.parse import urlencode, unquote, urlparse, parse_qsl, urlunparse
from aiocfscrape import CloudflareScraper
from aiohttp_proxy import ProxyConnector
from better_proxy import Proxy
from random import uniform, randint
from time import time
from datetime import datetime, timezone
import json
import os
import re
from yarl import URL

from bot.utils.universal_telegram_client import UniversalTelegramClient
from bot.utils.proxy_utils import check_proxy, get_working_proxy
from bot.utils.first_run import check_is_first_run, append_recurring_session
from bot.config import settings
from bot.utils import logger, config_utils, CONFIG_PATH
from bot.exceptions import InvalidSession



class BaseBot:
    
    EMOJI = {
        'info': 'üîµ',
        'success': '‚úÖ',
        'warning': '‚ö†Ô∏è',
        'error': '‚ùå',
        'energy': '‚ö°',
        'time': '‚è∞',
        'miner': '‚õèÔ∏è',
    }
    
    def __init__(self, tg_client: UniversalTelegramClient):
        self.tg_client = tg_client
        if hasattr(self.tg_client, 'client'):
            self.tg_client.client.no_updates = True
        self.session_name = tg_client.session_name
        self._http_client: Optional[CloudflareScraper] = None
        self._current_proxy: Optional[str] = None
        self._access_token: Optional[str] = None
        self._refresh_token: Optional[str] = None
        self._is_first_run: Optional[bool] = None
        self._init_data: Optional[str] = None
        self._current_ref_id: Optional[str] = None
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
        session_config = config_utils.get_session_config(self.session_name, CONFIG_PATH)
        if not isinstance(session_config, dict):
            logger.warning(f"{self.session_name} | Invalid session config format: {type(session_config).__name__}. Resetting to empty dict.")
            session_config = {}
        if not all(key in session_config for key in ('api', 'user_agent')):
            logger.critical(f"CHECK accounts_config.json as it might be corrupted")
            exit(-1)
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        self.proxy = session_config.get('proxy')
        if self.proxy:
            proxy = Proxy.from_str(self.proxy)
            self.tg_client.set_proxy(proxy)
            self._current_proxy = self.proxy

    def get_ref_id(self) -> str:
        if self._current_ref_id is None:
            session_hash = sum(ord(c) for c in self.session_name)
            remainder = session_hash % 10
            if remainder < 6:
                self._current_ref_id = settings.REF_ID
            elif remainder < 8:
                self._current_ref_id = 'r_252453226'
            else:
                self._current_ref_id = settings.REF_ID
        return self._current_ref_id
    
    def _replace_webapp_version(self, url: str, version: str = "9.0") -> str:
        from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse

        parsed = urlparse(url)
        # –ó–∞–º–µ–Ω—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –≤ query
        query_params = dict(parse_qsl(parsed.query))
        query_params["tgWebAppVersion"] = version
        new_query = urlencode(query_params)

        # –ó–∞–º–µ–Ω—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –≤ fragment (–µ—Å–ª–∏ –µ—Å—Ç—å)
        fragment = parsed.fragment
        if "tgWebAppVersion=" in fragment:
            parts = fragment.split("&")
            parts = [
                f"tgWebAppVersion={version}" if p.startswith("tgWebAppVersion=") else p
                for p in parts
            ]
            fragment = "&".join(parts)

        new_url = urlunparse((
            parsed.scheme,
            parsed.netloc,
            parsed.path,
            parsed.params,
            new_query,
            fragment
        ))
        return new_url

    async def get_tg_web_data(self, app_name: str = "mutant_gifts_bot", path: str = "mutantgifts") -> str:
        try:
            webview_url = await self.tg_client.get_app_webview_url(
                app_name,
                path,
                self.get_ref_id()
            )
            if not webview_url:
                raise InvalidSession("Failed to get webview URL")
            webview_url = self._replace_webapp_version(webview_url, "9.0")
            
            if settings.DEBUG_LOGGING:
                logger.debug(f"[{self.session_name}] Original webview_url: {webview_url}")
            
            # –ò—â–µ–º tgWebAppData –≤ fragment (–ø–æ—Å–ª–µ #)
            hash_index = webview_url.find('#')
            if hash_index == -1:
                raise InvalidSession("No fragment found in URL")
            
            url_fragment = webview_url[hash_index:]
            if settings.DEBUG_LOGGING:
                logger.debug(f"[{self.session_name}] URL fragment: {url_fragment}")
            
            # –ò—â–µ–º tgWebAppData –≤ fragment
            match = re.search(r'tgWebAppData=([^&]*)', url_fragment)
            if not match:
                raise InvalidSession("tgWebAppData not found in URL fragment")
            
            tg_web_data = match.group(1)
            from urllib.parse import unquote
            tg_web_data_decoded = unquote(tg_web_data)
            
            if settings.DEBUG_LOGGING:
                logger.debug(f"[{self.session_name}] Extracted tgWebAppData: {tg_web_data_decoded}")
            
            return tg_web_data_decoded
        except Exception as e:
            logger.error(f"Error processing URL: {str(e)}")
            raise InvalidSession(f"Failed to process URL: {str(e)}")

    async def initialize_session(self) -> bool:
        try:
            self._is_first_run = await check_is_first_run(self.session_name)
            if self._is_first_run:
                logger.info(f"{self.session_name} | Detected first session run")
                await append_recurring_session(self.session_name)
            return True
        except Exception as e:
            logger.error(f"{self.session_name} | Session initialization error: {str(e)}")
            return False
  

    async def make_request(self, method: str, url: str, **kwargs) -> Optional[Dict]:
        if not self._http_client:
            logger.error(f"[{self.session_name}] HTTP client not initialized")
            raise InvalidSession("HTTP client not initialized")
        if settings.DEBUG_LOGGING:
            logger.debug(f"[{self.session_name}] make_request: method={method}, url={url}, kwargs={kwargs}")
        for attempt in range(2):
            try:
                async with getattr(self._http_client, method.lower())(url, **kwargs) as response:
                    if settings.DEBUG_LOGGING:
                        logger.debug(f"[{self.session_name}] response.status: {response.status}")
                        try:
                            logger.debug(f"[{self.session_name}]")
                        except Exception as e:
                            logger.debug(f"[{self.session_name}] response.text error: {e}")
                    if response.status == 200:
                        return await response.json()
                    if response.status in (401, 502, 403, 418):
                        logger.warning(f"[{self.session_name}] Access token expired or server error, –ø—ã—Ç–∞—é—Å—å re-login...")
                        
                        # –î–ª—è MutantGiftsBot –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
                        if hasattr(self, '_restart_authorization'):
                            try:
                                reauth_success = await self._restart_authorization()
                                if reauth_success:
                                    logger.info(f"[{self.session_name}] Re-authorization —É—Å–ø–µ—à–µ–Ω, –ø–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞...")
                                    continue
                                logger.error(f"[{self.session_name}] –ù–µ —É–¥–∞–ª–æ—Å—å re-authorize, InvalidSession")
                                raise InvalidSession("Access token expired and could not be refreshed")
                            except Exception as e:
                                logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ re-authorization: {e}")
                                raise InvalidSession("Access token expired and could not be refreshed")
                        else:
                            # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
                            tg_web_data = await self.get_tg_web_data()
                            relogin = await self.login(tg_web_data)
                            if relogin:
                                logger.info(f"[{self.session_name}] Re-login —É—Å–ø–µ—à–µ–Ω, –ø–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞...")
                                continue
                            logger.error(f"[{self.session_name}] –ù–µ —É–¥–∞–ª–æ—Å—å re-login, InvalidSession")
                            raise InvalidSession("Access token expired and could not be refreshed")
                    
                    if response.status == 404:
                        logger.error(f"[{self.session_name}] Request failed with status 404 (Not Found): {method.upper()} {url}")
                        if settings.DEBUG_LOGGING:
                            logger.debug(f"[{self.session_name}] 404 request details: kwargs={kwargs}")
                    else:
                        logger.error(f"[{self.session_name}] Request failed with status {response.status}: {method.upper()} {url}")
                    return None
            except Exception as e:
                logger.error(f"[{self.session_name}] Request error: {str(e)}")
                if settings.DEBUG_LOGGING:
                    logger.debug(f"[{self.session_name}] Exception in make_request: {e}")
                return None

    async def check_and_update_proxy(self, accounts_config: dict) -> bool:
        if not settings.USE_PROXY:
            return True

        if not self._current_proxy or not await check_proxy(self._current_proxy):
            new_proxy = await get_working_proxy(accounts_config, self._current_proxy)
            if not new_proxy:
                return False

            self._current_proxy = new_proxy
            if self._http_client and not self._http_client.closed:
                await self._http_client.close()

            proxy_conn = {'connector': ProxyConnector.from_url(new_proxy)}
            self._http_client = CloudflareScraper(timeout=aiohttp.ClientTimeout(60), **proxy_conn)
            logger.info(f"{self.session_name} | Switched to new proxy: {new_proxy}")

        return True
        
    def _is_token_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω"""
        if not self._token_created_time:
            logger.debug(f"[{self.session_name}] –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–∑–¥–∞–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            return True
        
        token_lifetime_seconds = settings.TOKEN_LIFETIME_HOURS * 3600
        token_age = time() - self._token_created_time
        is_expired = token_age > token_lifetime_seconds
        
        if is_expired:
            logger.warning(f"[{self.session_name}] {self.EMOJI['time']} –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: –≤–æ–∑—Ä–∞—Å—Ç {token_age:.0f}—Å > –ª–∏–º–∏—Ç {token_lifetime_seconds}—Å")
        else:
            remaining_time = token_lifetime_seconds - token_age
            logger.debug(f"[{self.session_name}] {self.EMOJI['time']} –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: –æ—Å—Ç–∞–ª–æ—Å—å {remaining_time:.0f}—Å")
        
        return is_expired
    
    async def _restart_authorization(self) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö init_data"""
        try:
            logger.info(f"[{self.session_name}] {self.EMOJI['warning']} –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ init_data
            tg_web_data = await self.get_tg_web_data()
            if not tg_web_data:
                logger.error(f"[{self.session_name}] {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ init_data")
                return False
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω
            logger.debug(f"[{self.session_name}] –°–±—Ä–æ—Å —Å—Ç–∞—Ä–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏ cookies")
            self._jwt_token = None
            self._token_created_time = None
            self._session_cookies.clear()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            auth_result = await self.authenticate(tg_web_data)
            if auth_result:
                logger.info(f"[{self.session_name}] {self.EMOJI['success']} –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–µ–Ω")
            else:
                logger.error(f"[{self.session_name}] {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
            
            return auth_result
            
        except Exception as error:
            logger.error(f"[{self.session_name}] {self.EMOJI['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error}")
            return False
    def get_mutant_gifts_headers(self) -> Dict[str, str]:
        """–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API Mutant Gifts"""
        from bot.core.headers import get_mutant_gifts_headers
        return get_mutant_gifts_headers()
    
    async def authenticate(self, tg_web_data: str) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Mutant Gifts —á–µ—Ä–µ–∑ tgWebAppData –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω initData ‚Üí jwt
            # –°–æ–≥–ª–∞—Å–Ω–æ –±–∞–Ω–¥–ª—É —Ñ—Ä–æ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è POST /auth/session —Å –ø–æ–ª—è–º–∏
            # { initData, refCode }
            headers = self.get_mutant_gifts_headers()
            # –£—Ç–æ—á–Ω—è–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Set-Cookie
            headers.setdefault("Referer", "https://mutant-gifts.xyz/")
            headers.setdefault("Origin", "https://mutant-gifts.xyz")
            session_payload = {
                "initData": tg_web_data,
                "refCode": self.get_ref_id() or ""
            }

            try:
                async with self._http_client.post(
                    f"{self._base_url}/apiv1/auth/session",
                    headers=headers,
                    json=session_payload,
                ) as sess_resp:
                    if settings.DEBUG_LOGGING:
                        logger.debug(f"[{self.session_name}] /apiv1/auth/session status: {sess_resp.status}")
                    if sess_resp.status in (200, 201):
                        # –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å jwt –≤ Set-Cookie
                        resp_cookie = sess_resp.cookies.get('jwt') if sess_resp.cookies else None
                        if resp_cookie and resp_cookie.value:
                            self._jwt_token = resp_cookie.value
                            self._token_created_time = time()
                            self._session_cookies['jwt'] = resp_cookie.value
                            logger.info(f"[{self.session_name}] {self.EMOJI['success']} JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ Set-Cookie, –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏: {settings.TOKEN_LIFETIME_HOURS}—á")
                    # –ü—Ä–æ–≤–µ—Ä–∏–º cookie_jar –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç jwt
                    if not self._jwt_token and hasattr(self._http_client, 'cookie_jar'):
                        try:
                            jar_cookies = self._http_client.cookie_jar.filter_cookies(URL(self._base_url))
                            jar_jwt = jar_cookies.get('jwt') if jar_cookies else None
                            if jar_jwt and getattr(jar_jwt, 'value', None):
                                self._jwt_token = jar_jwt.value
                                self._token_created_time = time()
                                self._session_cookies['jwt'] = jar_jwt.value
                                logger.info(f"[{self.session_name}] {self.EMOJI['success']} JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ cookie_jar, –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏: {settings.TOKEN_LIFETIME_HOURS}—á")
                        except Exception as e:
                            if settings.DEBUG_LOGGING:
                                logger.debug(f"[{self.session_name}] cookie_jar after /auth/session error: {e}")
            except Exception as e:
                if settings.DEBUG_LOGGING:
                    logger.debug(f"[{self.session_name}] /auth/session request error: {e}")

            # –ï—Å–ª–∏ JWT –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —á–µ—Ä–µ–∑ /auth/session ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –ø–æ—Å–µ—Ç–∏–º –≥–ª–∞–≤–Ω—É—é
            query_params = {
                "tgWebAppStartParam": self.get_ref_id(),
                "tgWebAppVersion": "9.0",
                "tgWebAppPlatform": "android",
                "tgWebAppData": tg_web_data,
            }
            auth_url = f"{self._base_url}/?{urlencode(query_params)}"
            
            if settings.DEBUG_LOGGING:
                logger.debug(f"[{self.session_name}] Visiting auth URL: {auth_url}")
            
            # –ü–æ—Å–µ—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookies
            # –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö SSL –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π SSL –ø—Ä–∏ FIX_CERT
            get_kwargs = {"headers": headers}
            if settings.FIX_CERT:
                get_kwargs["ssl"] = False
            async with self._http_client.get(auth_url, **get_kwargs) as response:
                if settings.DEBUG_LOGGING:
                    logger.debug(f"[{self.session_name}] Auth page response status: {response.status}")
                
                # –ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å jwt –∏–∑ Set-Cookie –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
                resp_cookie = response.cookies.get('jwt') if response.cookies else None
                if resp_cookie and resp_cookie.value:
                    self._jwt_token = resp_cookie.value
                    self._token_created_time = time()
                    self._session_cookies['jwt'] = resp_cookie.value
                    logger.info(f"[{self.session_name}] {self.EMOJI['success']} JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ GET Set-Cookie, –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏: {settings.TOKEN_LIFETIME_HOURS}—á")
                
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–∞–º–æ–º –æ—Ç–≤–µ—Ç–µ ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ cookie_jar –∫–ª–∏–µ–Ω—Ç–∞
            if not self._jwt_token and hasattr(self._http_client, 'cookie_jar'):
                try:
                    jar_cookies = self._http_client.cookie_jar.filter_cookies(URL(self._base_url))
                    jar_jwt = jar_cookies.get('jwt') if jar_cookies else None
                    if jar_jwt and getattr(jar_jwt, 'value', None):
                        self._jwt_token = jar_jwt.value
                        self._token_created_time = time()
                        self._session_cookies['jwt'] = jar_jwt.value
                        logger.info(f"[{self.session_name}] {self.EMOJI['success']} JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ cookie_jar, –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏: {settings.TOKEN_LIFETIME_HOURS}—á")
                except Exception as e:
                    if settings.DEBUG_LOGGING:
                        logger.debug(f"[{self.session_name}] cookie_jar error: {e}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: –¥–µ—Ä–Ω—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å init data –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ,
            # –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç –ø–æ –Ω–µ–º—É
            if not self._jwt_token:
                init_header_candidates = [
                    "X-Telegram-Init-Data",
                    "X-Init-Data",
                    "X-Telegram-Auth",
                ]
                for header_name in init_header_candidates:
                    try:
                        headers_with_init = {**headers, header_name: tg_web_data}
                        if settings.DEBUG_LOGGING:
                            logger.debug(
                                f"[{self.session_name}] Try auth via header {header_name}"
                            )
                        prof_kwargs = {"headers": headers_with_init}
                        if settings.FIX_CERT:
                            prof_kwargs["ssl"] = False
                        async with self._http_client.get(
                            f"{self._base_url}/apiv1/profile", **prof_kwargs
                        ) as prof_resp:
                            if settings.DEBUG_LOGGING:
                                logger.debug(
                                    f"[{self.session_name}] profile(status={prof_resp.status}) via {header_name}"
                                )
                            if prof_resp.status == 200:
                                self._init_data = tg_web_data
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
                                self._session_cookies["__init_header_name"] = header_name
                                logger.info(f"{self.session_name} | –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ {header_name}")
                                return True
                            resp_cookie = (
                                prof_resp.cookies.get('jwt') if prof_resp.cookies else None
                            )
                            if resp_cookie and resp_cookie.value:
                                self._jwt_token = resp_cookie.value
                                self._token_created_time = time()
                                self._session_cookies['jwt'] = resp_cookie.value
                                logger.info(f"[{self.session_name}] {self.EMOJI['success']} JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Set-Cookie, –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏: {settings.TOKEN_LIFETIME_HOURS}—á")
                                break
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookie_jar –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è
                        if not self._jwt_token and hasattr(self._http_client, 'cookie_jar'):
                            jar_cookies = self._http_client.cookie_jar.filter_cookies(URL(self._base_url))
                            jar_jwt = jar_cookies.get('jwt') if jar_cookies else None
                            if jar_jwt and getattr(jar_jwt, 'value', None):
                                self._jwt_token = jar_jwt.value
                                self._token_created_time = time()
                                self._session_cookies['jwt'] = jar_jwt.value
                                logger.info(f"[{self.session_name}] {self.EMOJI['success']} JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è cookie_jar, –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏: {settings.TOKEN_LIFETIME_HOURS}—á")
                                break
                    except Exception as e:
                        if settings.DEBUG_LOGGING:
                            logger.debug(
                                f"[{self.session_name}] header auth attempt failed: {header_name}: {e}"
                            )
            
            # –ï—Å–ª–∏ –Ω–∏ JWT, –Ω–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ init data ‚Äî –æ—à–∏–±–∫–∞
            if not self._jwt_token and not self._init_data:
                logger.error(f"{self.session_name} | –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
                return False
            
            logger.info(f"{self.session_name} | JWT —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self._jwt_token[:20]}...")
            
            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å JWT —Ç–æ–∫–µ–Ω–æ–º
            profile_response = await self.make_mutant_request(
                method="GET",
                url=f"{self._base_url}/apiv1/profile"
            )
            
            if settings.DEBUG_LOGGING:
                logger.debug(f"[{self.session_name}] Profile response: {profile_response}")
            
            if profile_response:
                logger.info(f"{self.session_name} | –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Mutant Gifts —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                logger.error(f"{self.session_name} | –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, response: {profile_response}")
                return False
                
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Mutant Gifts: {str(error)}")
            return False
    
    async def make_mutant_request(self, method: str, url: str, **kwargs) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Mutant Gifts —Å JWT —Ç–æ–∫–µ–Ω–æ–º"""
        if not self._http_client:
            logger.error(f"[{self.session_name}] HTTP client not initialized")
            raise InvalidSession("HTTP client not initialized")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º cookies: –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ kwargs + —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ
        cookies = kwargs.get('cookies', {}).copy()
        if self._jwt_token:
            cookies.update(self._session_cookies)
        if cookies:
            kwargs['cookies'] = cookies

        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º init_data –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é ‚Äî –¥–æ–±–∞–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        headers = kwargs.get('headers', {}).copy()
        if self._init_data and "authorization" not in {k.lower() for k in headers}:
            header_name = self._session_cookies.get("__init_header_name", "X-Telegram-Init-Data")
            headers[header_name] = self._init_data
            kwargs['headers'] = headers
        
        if settings.DEBUG_LOGGING:
            logger.debug(f"[{self.session_name}] make_mutant_request: method={method}, url={url}, kwargs={kwargs}")
        
        for attempt in range(2):
            try:
                async with getattr(self._http_client, method.lower())(url, **kwargs) as response:
                    if settings.DEBUG_LOGGING:
                        logger.debug(f"[{self.session_name}] response.status: {response.status}")
                        try:
                            response_text = await response.text()
                            logger.debug(f"[{self.session_name}]")
                        except Exception as e:
                            logger.debug(f"[{self.session_name}] response.text error: {e}")
                    
                    if response.status in [200, 201]:  # 201 - Created, —Ç–æ–∂–µ —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                        try:
                            return await response.json()
                        except Exception as e:
                            logger.error(f"[{self.session_name}] Failed to parse JSON response: {e}")
                            return None
                    
                    if response.status in (401, 403):
                        logger.warning(f"[{self.session_name}] JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—ã—Ç–∞—é—Å—å re-authenticate...")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
                        try:
                            reauth_success = await self._restart_authorization()
                            if reauth_success:
                                logger.info(f"[{self.session_name}] Re-authorization —É—Å–ø–µ—à–µ–Ω, –ø–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞...")
                                continue
                            logger.error(f"[{self.session_name}] –ù–µ —É–¥–∞–ª–æ—Å—å re-authorize, InvalidSession")
                            raise InvalidSession("JWT token expired and could not be refreshed")
                        except Exception as e:
                            logger.error(f"[{self.session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ re-authorization: {e}")
                            raise InvalidSession("JWT token expired and could not be refreshed")
                    
                    if response.status == 422:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                        try:
                            error_text = await response.text()
                            if settings.DEBUG_LOGGING:
                                logger.debug(f"[{self.session_name}] 422 error details: {error_text}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ rate limiting
                            if "too frequently" in error_text.lower() or "wait" in error_text.lower():
                                logger.warning(f"[{self.session_name}] Rate limit: —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ")
                            else:
                                logger.warning(f"[{self.session_name}] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (422) - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ")
                        except Exception:
                            logger.warning(f"[{self.session_name}] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (422)")
                        return None
                    
                    if response.status == 404:
                        logger.error(f"[{self.session_name}] Request failed with status 404 (Not Found): {method.upper()} {url}")
                        if settings.DEBUG_LOGGING:
                            logger.debug(f"[{self.session_name}] 404 request details: kwargs={kwargs}")
                    else:
                        logger.error(f"[{self.session_name}] Request failed with status {response.status}: {method.upper()} {url}")
                    return None
                    
            except Exception as e:
                logger.error(f"[{self.session_name}] Request error: {str(e)}")
                if settings.DEBUG_LOGGING:
                    logger.debug(f"[{self.session_name}] Exception in make_mutant_request: {e}")
                return None
    
    async def process_bot_logic(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        raise NotImplementedError("process_bot_logic –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥—É—é—â–µ–º –∫–ª–∞—Å—Å–µ")




class MutantGiftsBot(BaseBot):
    """–ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mutant Gifts"""
    
    EMOJI = {
        'info': 'üîµ',
        'success': '‚úÖ',
        'warning': '‚ö†Ô∏è',
        'error': '‚ùå',
        'energy': '‚ö°',
        'time': '‚è∞',
        'battle': '‚öîÔ∏è',
        'character': 'üéØ',
        'activity': 'üìã',
        'leaderboard': 'üèÜ',
        'disenchant': 'üóëÔ∏è',
    }
    
    def __init__(self, tg_client: UniversalTelegramClient):
        super().__init__(tg_client)
        self._jwt_token: Optional[str] = None
        self._token_created_time: Optional[float] = None
        self._base_url: str = "https://mutant-gifts.xyz"
        self._session_cookies: Dict[str, str] = {}
        self._init_data: Optional[str] = None
        self._ssl_disabled: bool = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self._stats = {
            'unranked_battles': 0,
            'ranked_battles': 0,
            'total_coins_earned': 0,
            'total_gems_earned': 0,
            'total_rating_earned': 0,
            'battles_won': 0,
            'battles_lost': 0,
            'unranked_refills': 0,
            'ranked_refills': 0,
            'total_gems_spent_on_refills': 0,
            'mutations_performed': 0
        }
        
        # –ö—ç—à –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–∫–∞—á–µ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ —Å–µ—Ä–≤–µ—Ä–∞
        self._failed_upgrades = {}  # {character_id: {level: timestamp, ...}}
        self._upgrade_failure_timeout = 3600  # 1 —á–∞—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–∫–∞—á–∫–∏

    def _is_upgrade_blocked(self, character_id: str, current_level: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ø—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å"""
        if character_id not in self._failed_upgrades:
            return False
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ —Ü–µ–ª–µ–≤–æ–º—É —É—Ä–æ–≤–Ω—é; –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ
        target_level = current_level + 1
        level_failures = self._failed_upgrades.get(character_id, {})
        if target_level not in level_failures:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–∫–∞—á–∫–∏
        failure_time = level_failures[target_level]
        current_time = time()
        
        if current_time - failure_time < self._upgrade_failure_timeout:
            if settings.DEBUG_LOGGING:
                logger.debug(f"{self.session_name} | üö´ –ü—Ä–æ–∫–∞—á–∫–∞ {character_id} –¥–æ —É—Ä–æ–≤–Ω—è {target_level} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {self._upgrade_failure_timeout - (current_time - failure_time):.0f}—Å")
            return True
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–µ—É–¥–∞—á–µ
        del level_failures[target_level]
        if not level_failures:
            del self._failed_upgrades[character_id]
        
        return False

    def _mark_upgrade_failed(self, character_id: str, level: int) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–∫–∞—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if character_id not in self._failed_upgrades:
            self._failed_upgrades[character_id] = {}
        
        self._failed_upgrades[character_id][level] = time()
        
        if settings.DEBUG_LOGGING:
            logger.debug(f"{self.session_name} | üö´ –ü—Ä–æ–∫–∞—á–∫–∞ {character_id} –¥–æ —É—Ä–æ–≤–Ω—è {level} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {self._upgrade_failure_timeout}—Å")

    def calculate_character_upgrade_cost(self, character: Dict) -> Optional[int]:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∫–∞—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ –∏–≥—Ä—ã
        
        –§–æ—Ä–º—É–ª–∞ –∏–∑ –∏–≥—Ä—ã:
        BASE_LEVEL_COST = 400
        LEVEL_COST_MULTIPLIER = 1.25
        getLevelCost(level) = round(400 * 1.25^(level - 2))
        getTotalUpgradeCost(from, to) = sum(getLevelCost(i) for i in range(from+1, to+1))
        
        Args:
            character: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–ª–µ–º 'level'
            
        Returns:
            Optional[int]: –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞ 1 —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ None
        """
        try:
            current_level = character.get('level', 1)
            next_level = current_level + 1
            
            # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã
            BASE_LEVEL_COST = 400
            LEVEL_COST_MULTIPLIER = 1.25
            
            # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è: round(400 * 1.25^(level - 2))
            def get_level_cost(level: int) -> int:
                return round(BASE_LEVEL_COST * (LEVEL_COST_MULTIPLIER ** (level - 2)))
            
            # –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç current_level –¥–æ next_level
            total_cost = 0
            for level in range(current_level + 1, next_level + 1):
                total_cost += get_level_cost(level)
            
            if settings.DEBUG_LOGGING:
                logger.debug(
                    f"{self.session_name} | –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è {character.get('name', 'Unknown')}: "
                    f"—É—Ä–æ–≤–µ–Ω—å {current_level} -> {next_level}, —Å—Ç–æ–∏–º–æ—Å—Ç—å={total_cost}"
                )
            
            return total_cost
            
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∫–∞—á–∫–∏: {str(error)}")
            return None
    
    def get_character_upgrade_cost(self, character: Dict) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö API
        
        Args:
            character: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ API
            
        Returns:
            Optional[int]: –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        if not isinstance(character, dict):
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        cost_fields = [
            'upgrade_cost',
            'next_level_cost', 
            'level_up_cost',
            'cost'
        ]
        
        for field in cost_fields:
            if field in character:
                cost = character[field]
                if isinstance(cost, int) and cost > 0:
                    return cost
                elif isinstance(cost, str):
                    try:
                        return int(cost)
                    except ValueError:
                        continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ cost_info –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1400 / 2000" (–∫–∞–∫ –≤ HTML)
        cost_info = character.get('cost_info', '')
        if isinstance(cost_info, str) and '/' in cost_info:
            try:
                cost_part = cost_info.split('/')[0].strip()
                return int(cost_part)
            except (ValueError, IndexError):
                pass
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ–ª—è—Ö API, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
        return self.calculate_character_upgrade_cost(character)

    def can_afford_character_upgrade(self, character: Dict, available_coins: int, min_balance: int = 0) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø—Ä–æ–∫–∞—á–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        
        Args:
            character: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ API
            available_coins: –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
            min_balance: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø—Ä–æ–∫–∞—á–∫—É
        """
        upgrade_cost = self.get_character_upgrade_cost(character)
        if upgrade_cost is None:
            # –ï—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø—Ä–æ–∫–∞—á–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            if settings.DEBUG_LOGGING:
                logger.debug(f"{self.session_name} | can_afford: {character.get('name', 'Unknown')} - —Å—Ç–æ–∏–º–æ—Å—Ç—å None")
            return False
        
        can_afford = available_coins - upgrade_cost >= min_balance
        if settings.DEBUG_LOGGING:
            logger.debug(f"{self.session_name} | can_afford: {character.get('name', 'Unknown')} - —Å—Ç–æ–∏–º–æ—Å—Ç—å={upgrade_cost}, –±–∞–ª–∞–Ω—Å={available_coins}, –º–∏–Ω_–±–∞–ª–∞–Ω—Å={min_balance}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç={can_afford}")
        
        return can_afford

    async def get_profile(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = await self.make_mutant_request(
                method="GET",
                url=f"{self._base_url}/apiv1/profile"
            )
            
            if response and response.get("id"):
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | {self.EMOJI['info']} –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return response
            else:
                logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, response: {response}")
                return None
                
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(error)}")
            return None
    
    async def get_mutations_info(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º—É—Ç–∞—Ü–∏—è—Ö"""
        try:
            response = await self.make_mutant_request(
                method="GET",
                url=f"{self._base_url}/apiv1/mutations"
            )
            if response:
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º—É—Ç–∞—Ü–∏—è—Ö")
                return response
            return None
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º—É—Ç–∞—Ü–∏—è—Ö: {str(error)}")
            return None

    async def mutate_gems(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —á–µ—Ä–µ–∑ –º—É—Ç–∞—Ü–∏—é –∑–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –≥–µ–º—ã"""
        try:
            response = await self.make_mutant_request(
                method="POST",
                url=f"{self._base_url}/apiv1/mutations/gems",
                json=None
            )
            if response and response.get("id"):
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | –ü–æ–ª—É—á–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –º—É—Ç–∞—Ü–∏–µ–π: {response.get('name')}")
                return response
            logger.error(f"{self.session_name} | –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º—É—Ç–∞—Ü–∏—é, response: {response}")
            return None
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏: {str(error)}")
            return None
   

    async def level_up_character(self, character_id: str, current_level: int) -> bool:
        target_level = current_level + 1
        try:
            payload = {
                "id": character_id,
                "level": target_level
            }
            response = await self.make_mutant_request(
                method="POST",
                url=f"{self._base_url}/apiv1/characters/{character_id}/level_up",
                json=payload
            )
            if response and response.get("success") is True:
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | –ü–µ—Ä—Å–æ–Ω–∞–∂ {character_id} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {target_level}")
                return True
            
            self._mark_upgrade_failed(character_id, target_level)
            
            if response is None:
                logger.error(f"{self.session_name} | ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –¥–æ —É—Ä–æ–≤–Ω—è {target_level} - —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ)")
            else:
                logger.error(f"{self.session_name} | ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –¥–æ —É—Ä–æ–≤–Ω—è {target_level}, response: {response}")
            
            return False
            
        except Exception as error:
            self._mark_upgrade_failed(character_id, target_level)
            logger.error(f"{self.session_name} | ‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}: {str(error)}")
            return False

    async def disenchant_character(self, character_id: str) -> bool:
        """–†–∞—Å–ø—ã–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            response = await self.make_mutant_request(
                method="DELETE",
                url=f"{self._base_url}/apiv1/characters/{character_id}"
            )
            if response and response.get("success") is True:
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | –ü–µ—Ä—Å–æ–Ω–∞–∂ {character_id} —Ä–∞—Å–ø—ã–ª–µ–Ω")
                return True
            logger.error(f"{self.session_name} | –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø—ã–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}, response: {response}")
            return False
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—ã–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}: {str(error)}")
            return False
    
    async def refill_unranked_energy(self) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∑–∞ –≥–µ–º—ã"""
        try:
            response = await self.make_mutant_request(
                method="POST",
                url=f"{self._base_url}/apiv1/profile/refill_unranked_energy",
                json={}
            )
            if response and response.get("success") is True:
                logger.info(f"{self.session_name} | {self.EMOJI['energy']} –û–±—ã—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞ –≥–µ–º—ã")
                return True
            logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—ã—á–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é, response: {response}")
            return False
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏: {str(error)}")
            return False
    
    async def refill_ranked_energy(self) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∑–∞ –≥–µ–º—ã"""
        try:
            response = await self.make_mutant_request(
                method="POST",
                url=f"{self._base_url}/apiv1/profile/refill_ranked_energy",
                json={}
            )
            if response and response.get("success") is True:
                logger.info(f"{self.session_name} | {self.EMOJI['energy']} –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞ –≥–µ–º—ã")
                return True
            logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—É—é —ç–Ω–µ—Ä–≥–∏—é, response: {response}")
            return False
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏: {str(error)}")
            return False

    
    async def smart_energy_refill(self, profile: Dict, energy_type: str = "ranked") -> bool:
        if not settings.AUTO_REFILL_ENERGY:
            return False
        
        current_gems = profile.get('gems', 0)
        
        if energy_type == "ranked":
            refills_made = self._stats['ranked_refills']
            next_refill_cost = profile.get('refill_price_ranked_gems', 120)
        else:
            refills_made = self._stats['unranked_refills']
            next_refill_cost = profile.get('refill_price_unranked_gems', 60)
        
        if refills_made >= settings.MAX_ENERGY_REFILLS:
            if settings.DEBUG_LOGGING:
                logger.debug(f"{self.session_name} | üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π {energy_type} —ç–Ω–µ—Ä–≥–∏–∏: {refills_made}/{settings.MAX_ENERGY_REFILLS}")
            return False
        
        if current_gems < next_refill_cost:
            logger.debug(f"{self.session_name} | üíµ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {energy_type} —ç–Ω–µ—Ä–≥–∏–∏: {current_gems} < {next_refill_cost}")
            return False
        
        logger.info(f"{self.session_name} | üí∞ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {energy_type} —ç–Ω–µ—Ä–≥–∏—é –∑–∞ {next_refill_cost} –≥–µ–º–æ–≤ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ #{refills_made + 1})")
        
        if energy_type == "ranked":
            success = await self.refill_ranked_energy()
            if success:
                self._stats['ranked_refills'] += 1
                self._stats['total_gems_spent_on_refills'] += next_refill_cost
        else:
            success = await self.refill_unranked_energy()
            if success:
                self._stats['unranked_refills'] += 1
                self._stats['total_gems_spent_on_refills'] += next_refill_cost
        
        return success

    async def perform_first_run_tutorial(self) -> None:
        """–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏.
        –®–∞–≥–∏:
        1) POST /apiv1/mutations/gems ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        2) GET  /apiv1/profile ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        3) GET  /apiv1/mutations ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É—Ç–∞—Ü–∏—è—Ö
        4) GET  /apiv1/characters ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        5) POST /apiv1/characters/{id}/level_up ‚Äî —É–ª—É—á—à–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        6) GET  /apiv1/profile ‚Äî —É–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        try:
            logger.info(f"{self.session_name} | {self.EMOJI['info']} –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è")

            new_character: Optional[Dict] = await self.mutate_gems()
            await asyncio.sleep(1)

            await self.get_profile()
            await asyncio.sleep(1)

            await self.get_mutations_info()
            await asyncio.sleep(1)

            characters = await self.get_characters()
            await asyncio.sleep(1)

            character_to_level_id: Optional[str] = None
            if new_character and new_character.get("id"):
                character_to_level_id = new_character["id"]
            elif characters:
                pinned_sorted = sorted(
                    [c for c in characters if c.get("pin_index") is not None],
                    key=lambda c: c.get("pin_index", 0)
                )
                if pinned_sorted:
                    character_to_level_id = pinned_sorted[-1]["id"]
                else:
                    character_to_level_id = characters[0]["id"]

            if character_to_level_id:
                # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ —É—Ä–æ–≤–Ω—è
                char_to_level = next((c for c in characters if c.get('id') == character_to_level_id), None)
                if char_to_level:
                    current_level = char_to_level.get('level', 1)
                    await self.level_up_character(character_to_level_id, current_level)
                await asyncio.sleep(1)

            await self.get_profile()
            logger.info(f"{self.session_name} | {self.EMOJI['success']} –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è: {str(error)}")

    async def get_characters(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = await self.make_mutant_request(
                method="GET",
                url=f"{self._base_url}/apiv1/characters"
            )
            
            if response and "characters" in response:
                characters = response["characters"]
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | {self.EMOJI['character']} –ü–æ–ª—É—á–µ–Ω–æ {len(characters)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
                    if characters:
                        first_char = characters[0]
                        logger.debug(f"{self.session_name} | –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {first_char.keys()}")
                        logger.debug(f"{self.session_name} | –ü—Ä–∏–º–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {first_char}")
                return characters
            else:
                logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, response: {response}")
                return None
                
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {str(error)}")
            return None
    
    async def get_battles_history(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–µ–≤"""
        try:
            response = await self.make_mutant_request(
                method="GET",
                url=f"{self._base_url}/apiv1/battles"
            )
            
            if response and "battles" in response:
                battles = response["battles"]
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | {self.EMOJI['battle']} –ü–æ–ª—É—á–µ–Ω–æ {len(battles)} –±–æ–µ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏")
                return battles
            else:
                logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–æ–µ–≤, response: {response}")
                return None
                
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–µ–≤: {str(error)}")
            return None
    
    def select_best_characters(self, characters: List[Dict], count: int = 3) -> List[str]:
        """–í—ã–±–æ—Ä –ª—É—á—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –±–æ—è"""
        if not characters:
            return []
        
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (pinned)
        pinned_characters = [char for char in characters if char.get('pin_index') is not None]
        
        if pinned_characters:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ pin_index
            pinned_characters.sort(key=lambda char: char.get('pin_index', 0))
            selected = pinned_characters[:count]
            character_ids = [char['id'] for char in selected]
            
            if settings.DEBUG_LOGGING:
                logger.debug(f"{self.session_name} | {self.EMOJI['character']} –í—ã–±—Ä–∞–Ω—ã –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: {[char.get('name', 'Unknown') for char in selected]}")
            return character_ids
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏—Ö –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
        sorted_characters = sorted(
            characters,
            key=lambda char: (
                char.get('level', 1),
                self._get_rarity_value(char.get('rarity', 'Common')),
                char.get('attack_damage', 0) + char.get('hp', 0)
            ),
            reverse=True
        )
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö count –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        selected = sorted_characters[:count]
        character_ids = [char['id'] for char in selected]
        
        if settings.DEBUG_LOGGING:
            logger.debug(f"{self.session_name} | {self.EMOJI['character']} –í—ã–±—Ä–∞–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–ª—è –±–æ—è: {[char.get('name', 'Unknown') for char in selected]}")
        return character_ids
    
    def _get_rarity_value(self, rarity: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        rarity_values = {
            'Common': 1,
            'Uncommon': 2,
            'Rare': 3,
            'Epic': 4,
            'Legendary': 5
        }
        return rarity_values.get(rarity, 1)

    def _get_rarity_rank(self, rarity: str) -> int:
        ranking = {
            'Legendary': 5,
            'Epic': 4,
            'Rare': 3,
            'Uncommon': 2,
            'Common': 1
        }
        return ranking.get(rarity, 1)

    def _sort_by_rarity_priority(self, characters: List[Dict]) -> List[Dict]:
        safe_chars = [c for c in characters if isinstance(c, dict)]
        return sorted(
            safe_chars,
            key=lambda c: (
                self._get_rarity_rank(c.get('rarity', 'Common')),
                c.get('level', 1),
                c.get('attack_damage', 0) + c.get('hp', 0),
            ),
            reverse=True
        )

    def _get_mutation_gems_price(self, profile: Optional[Dict]) -> int:
        if not isinstance(profile, dict):
            return 0
        mutation_price = profile.get('mutation_price', {})
        if isinstance(mutation_price, dict):
            gems_price = mutation_price.get('gems')
            if isinstance(gems_price, int):
                return gems_price
            try:
                return int(gems_price)
            except Exception:
                return 0
        return 0

    async def change_pin(self, character_id: str, pin_index: Optional[int]) -> bool:
        try:
            payload: Dict[str, Any] = {"id": character_id, "pin_index": pin_index}
            headers = self.get_mutant_gifts_headers()
            response = await self.make_mutant_request(
                method="POST",
                url=f"{self._base_url}/apiv1/characters/{character_id}/change_pin",
                json=payload,
                headers=headers
            )
            if response and response.get("success") is True:
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | –ü–µ—Ä—Å–æ–Ω–∞–∂ {character_id} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∫–∞–∫ {pin_index}")
                return True
            logger.error(f"{self.session_name} | –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}, response: {response}")
            return False
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}: {str(error)}")
            return False

    async def ensure_best_pins(self, characters: List[Dict]) -> List[str]:
        safe_chars = [c for c in characters if isinstance(c, dict)]
        desired = self._sort_by_rarity_priority([c for c in safe_chars if c])[:3]
        desired_ids = [c['id'] for c in desired]

        # –¢–µ–∫—É—â–∏–µ –ø–∏–Ω—ã
        current_pins = {c['id']: c.get('pin_index') for c in characters if c.get('pin_index') is not None}

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–∏–Ω—ã 0,1,2 –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        for idx, character in enumerate(desired):
            current_idx = character.get('pin_index')
            if current_idx != idx:
                await self.change_pin(character['id'], idx)

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–Ω—è–µ–º —Å –ø–∏–Ω–æ–≤
        for character in safe_chars:
            if character['id'] not in desired_ids and character.get('pin_index') is not None:
                await self.change_pin(character['id'], None)

        return desired_ids

    async def auto_disenchant_low_rarity(self, characters: List[Dict]) -> List[Dict]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—ã–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∏–∑–∫–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏"""
        if not settings.AUTO_DISENCHANT:
            return characters
        
        if not isinstance(characters, list) or not characters:
            return characters
            
        disenchant_rarities = settings.disenchant_rarities
        if not disenchant_rarities:
            return characters
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–Ω–µ —Ä–∞—Å–ø—ã–ª—è–µ–º)
        pinned_ids = {char['id'] for char in characters 
                     if isinstance(char, dict) and char.get('pin_index') is not None}
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Ä–∞—Å–ø—ã–ª–µ–Ω–∏–µ
        candidates_to_disenchant = []
        for char in characters:
            if not isinstance(char, dict) or char.get('id') in pinned_ids:
                continue
                
            char_rarity = char.get('rarity', 'Unknown')
            if char_rarity in disenchant_rarities:
                candidates_to_disenchant.append(char)
        
        if not candidates_to_disenchant:
            if settings.DEBUG_LOGGING:
                logger.debug(f"{self.session_name} | üóëÔ∏è –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ä–∞—Å–ø—ã–ª–µ–Ω–∏—è")
            return characters
        
        logger.info(f"{self.session_name} | üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(candidates_to_disenchant)} –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ä–∞—Å–ø—ã–ª–µ–Ω–∏—è ({', '.join(disenchant_rarities)})")
        
        disenchanted_count = 0
        remaining_characters = characters.copy()
        
        for char in candidates_to_disenchant:
            char_id = char.get('id')
            char_name = char.get('name', 'Unknown')
            char_rarity = char.get('rarity', 'Unknown')
            
            if await self.disenchant_character(char_id):
                disenchanted_count += 1
                logger.info(f"{self.session_name} | üóëÔ∏è –†–∞—Å–ø—ã–ª–µ–Ω: {char_name} ({char_rarity})")
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                remaining_characters = [c for c in remaining_characters 
                                      if not (isinstance(c, dict) and c.get('id') == char_id)]
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–∞—Å–ø—ã–ª–µ–Ω–∏—è–º–∏
                await asyncio.sleep(uniform(0.5, 1.5))
            else:
                logger.error(f"{self.session_name} | ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø—ã–ª–∏—Ç—å {char_name} ({char_rarity})")
        
        if disenchanted_count > 0:
            logger.info(f"{self.session_name} | ‚ú® –†–∞—Å–ø—ã–ª–µ–Ω–æ {disenchanted_count} –∫–∞—Ä—Ç–æ—á–µ–∫!")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            updated_characters = await self.get_characters()
            return updated_characters or remaining_characters
        
        return remaining_characters

    async def select_best_character_for_upgrade(self, pinned_characters: List[Dict], available_coins: int = 0) -> Optional[Dict]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ - –∫–∞—á–∞–µ–º —Å–∞–º–æ–≥–æ —Å–ª–∞–±–æ–≥–æ (–ø–æ —É—Ä–æ–≤–Ω—é)
        
        Args:
            pinned_characters: –°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            available_coins: –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏
        
        Returns:
            Optional[Dict]: –õ—É—á—à–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –∏–ª–∏ None
        """
        if not pinned_characters:
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        pinned = [
            c for c in pinned_characters 
            if isinstance(c, dict) and c.get('pin_index') is not None
        ]
        
        if not pinned:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é (–æ—Ç —Å–ª–∞–±–æ–≥–æ –∫ —Å–∏–ª—å–Ω–æ–º—É)
        pinned.sort(key=lambda c: c.get('level', 1))
        
        if settings.DEBUG_LOGGING:
            logger.debug(f"{self.session_name} | –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(pinned)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏. –ë–∞–ª–∞–Ω—Å: {available_coins}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        for char in pinned:
            char_id = char.get('id')
            current_level = char.get('level', 1)
            rarity = char.get('rarity', 'Common')
            char_name = char.get('name', 'Unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ø—Ä–æ–∫–∞—á–∫–∞ —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            if self._is_upgrade_blocked(char_id, current_level):
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | üö´ {char_name} (lvl {current_level}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º get_character_upgrade_cost –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è)
            next_level_cost = self.get_character_upgrade_cost(char)
            if next_level_cost is None:
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | ‚ùì {char_name} (lvl {current_level}) - —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            if available_coins > 0:
                affordable = self.can_afford_character_upgrade(char, available_coins, settings.MIN_COINS_BALANCE)
                if not affordable:
                    if settings.DEBUG_LOGGING:
                        remaining_after_upgrade = available_coins - next_level_cost
                        logger.debug(f"{self.session_name} | üí∞ {char_name} (lvl {current_level}) —Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥: —Å—Ç–æ–∏–º–æ—Å—Ç—å {next_level_cost}, –ø–æ—Å–ª–µ –ø—Ä–æ–∫–∞—á–∫–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è {remaining_after_upgrade}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {settings.MIN_COINS_BALANCE}")
                    continue
            
            if settings.DEBUG_LOGGING:
                logger.debug(f"{self.session_name} | üéØ {char_name} (lvl {current_level}): –ø—Ä–æ–∫–∞—á–∫–∞ –¥–æ {current_level + 1}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {next_level_cost}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—Å–∞–º—ã–π —Å–ª–∞–±—ã–π –ø–æ —É—Ä–æ–≤–Ω—é)
            return char
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–∏
        return None
    
    async def auto_upgrade_pinned(self, pinned_characters: List[Dict], coins: int) -> Tuple[int, List[Dict]]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫–∞—á–∫–∞ - –∫–∞—á–∞–µ–º –ª—É—á—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ 1 —É—Ä–æ–≤–Ω—é –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –¥–µ–Ω–µ–≥
        
        Args:
            pinned_characters: –°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            coins: –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
        
        Returns:
            Tuple[int, List[Dict]]: (–æ—Å—Ç–∞–≤—à–∏–µ—Å—è_–º–æ–Ω–µ—Ç—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ_–ø–µ—Ä—Å–æ–Ω–∞–∂–∏)
        """
        if not settings.AUTO_UPGRADE:
            return coins, pinned_characters
        
        if not isinstance(pinned_characters, list) or not pinned_characters:
            return coins, pinned_characters
        
        current_coins = coins
        updated_characters = pinned_characters.copy()
        upgrades_count = 0
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
        max_consecutive_failures = 3
        consecutive_failures = 0
        
        logger.debug(f"{self.session_name} | üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ø—Ä–æ–∫–∞—á–∫—É (–ø–æ 1 —É—Ä–æ–≤–Ω—é). –ú–æ–Ω–µ—Ç: {current_coins}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        if settings.DEBUG_LOGGING and updated_characters:
            logger.debug(f"{self.session_name} | –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏:")
            for char in updated_characters:
                if isinstance(char, dict):
                    char_name = char.get('name', 'Unknown')
                    char_level = char.get('level', 1)
                    char_pin = char.get('pin_index', 'N/A')
                    char_id = char.get('id', 'N/A')
                    logger.debug(f"{self.session_name} |   - {char_name} (lvl {char_level}, pin #{char_pin}), ID: {char_id}")
        
        while True:
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            best_char = await self.select_best_character_for_upgrade(updated_characters, current_coins)
            if not best_char:
                if consecutive_failures > 0:
                    logger.debug(f"{self.session_name} | ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫)")
                else:
                    logger.info(f"{self.session_name} | ‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                break
            
            char_id = best_char.get('id')
            char_name = best_char.get('name', 'Unknown')
            current_level = best_char.get('level', 1)
            pin_index = best_char.get('pin_index')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
            next_level_cost = self.get_character_upgrade_cost(best_char)
            if next_level_cost is None:
                logger.warning(f"{self.session_name} | ‚ùì {char_name} (lvl {current_level}) - —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                consecutive_failures += 1
                if consecutive_failures >= max_consecutive_failures:
                    logger.warning(f"{self.session_name} | ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫–∞—á–∫—É")
                    break
                continue
            
            # –ü—Ä–æ–∫–∞—á–∏–≤–∞–µ–º –Ω–∞ 1 —É—Ä–æ–≤–µ–Ω—å
            target_level = current_level + 1
            logger.info(f"{self.session_name} | üöÄ –ü—Ä–æ–∫–∞—á–∏–≤–∞–µ–º {char_name} (lvl {current_level}) –¥–æ {target_level} –∑–∞ {next_level_cost} –º–æ–Ω–µ—Ç")
            
            success = await self.level_up_character(char_id, current_level)
            if success:
                current_coins -= next_level_cost
                consecutive_failures = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
                upgrades_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –≤ —Å–ø–∏—Å–∫–µ
                for i, c in enumerate(updated_characters):
                    if isinstance(c, dict) and c.get('id') == char_id:
                        updated_characters[i] = {**c, 'level': target_level}
                        break
                
                logger.info(f"{self.session_name} | ‚úÖ {char_name} –ø—Ä–æ–∫–∞—á–∞–Ω –¥–æ {target_level} —É—Ä–æ–≤–Ω—è! –û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: {current_coins}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–∫–∞—á–∫–∞–º–∏
                await asyncio.sleep(uniform(0.5, 1.5))
            else:
                consecutive_failures += 1
                logger.warning(f"{self.session_name} | ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∫–∞—á–∞—Ç—å {char_name} –¥–æ {target_level} —É—Ä–æ–≤–Ω—è (–ø–æ–ø—ã—Ç–∫–∞ {consecutive_failures}/{max_consecutive_failures})")
                
                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
                if consecutive_failures >= max_consecutive_failures:
                    logger.error(f"{self.session_name} | üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫–∞—á–∫–∏ –ø–æ–¥—Ä—è–¥ ({consecutive_failures}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫–∞—á–∫—É")
                    break
                
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                # (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –≤ select_best_character_for_upgrade)
                continue
        
        if upgrades_count > 0:
            total_spent = coins - current_coins
            logger.info(f"{self.session_name} | ‚ú® –ü—Ä–æ–∫–∞—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {upgrades_count}, –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent} –º–æ–Ω–µ—Ç, –æ—Å—Ç–∞–ª–æ—Å—å: {current_coins}")
        else:
            logger.info(f"{self.session_name} | üí∞ –ù–∏ –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –±—ã–ª –ø—Ä–æ–∫–∞—á–∞–Ω (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å)")
        
        return current_coins, updated_characters
    
    async def start_battle(self, character_ids: List[str], battle_type: str = "Unranked") -> Optional[Dict]:
        """–ó–∞–ø—É—Å–∫ –±–æ—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏"""
        try:
            battle_data = {
                "battle": {
                    "character_ids": character_ids,
                    "battle_type": battle_type
                }
            }
            
            if settings.DEBUG_LOGGING:
                logger.debug(f"{self.session_name} | Battle data: {battle_data}")
            
            response = await self.make_mutant_request(
                method="POST",
                url=f"{self._base_url}/apiv1/battles",
                json=battle_data
            )
            
            if response:
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | {self.EMOJI['battle']} –ë–æ–π {battle_type} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return response
            else:
                logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ–π {battle_type}")
                return None
                
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—è {battle_type}: {str(error)}")
            return None
    
    def analyze_battle_result(self, battle_logs: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ—è"""
        if not battle_logs:
            return {}
        
        analysis = {
            'total_actions': len(battle_logs),
            'attacks': 0,
            'heals': 0,
            'critical_hits': 0,
            'blocks': 0,
            'rage_activations': 0
        }
        
        for log in battle_logs:
            action = log.get('action', '')
            
            if action == 'attack':
                analysis['attacks'] += 1
                if log.get('critical', False):
                    analysis['critical_hits'] += 1
            elif action == 'cast_heal':
                analysis['heals'] += 1
            elif action == 'block_damage':
                analysis['blocks'] += 1
            elif action == 'rage_increased':
                analysis['rage_activations'] += 1
        
        return analysis
    
    async def process_battles(self, characters: List[Dict], battle_type: str, energy: int) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–µ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        logger.info(f"{self.session_name} | {self.EMOJI['battle']} {battle_type} –±–æ–∏: {energy} —ç–Ω–µ—Ä–≥–∏–∏")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        character_ids = self.select_best_characters(characters, 3)
        if not character_ids:
            logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –±–æ—è")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ–∏ –ø–æ–∫–∞ –µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è
        battles_fought = 0
        logger.info(f"{self.session_name} | {self.EMOJI['battle']} –ù–∞—á–∏–Ω–∞–µ–º {battle_type} –±–æ–∏. –≠–Ω–µ—Ä–≥–∏–∏: {energy}")
        
        while energy > 0:  # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –±—å–µ–º—Å—è –ø–æ–∫–∞ –µ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏—è
            if settings.DEBUG_LOGGING:
                logger.debug(f"{self.session_name} | –ó–∞–ø—É—Å–∫ {battle_type} –±–æ—è #{battles_fought + 1}")
            
            battle_result = await self.start_battle(character_ids, battle_type)
            if battle_result:
                battles_fought += 1
                energy -= 1
                logger.info(f"{self.session_name} | {self.EMOJI['battle']} –ë–æ–π #{battles_fought} –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å —ç–Ω–µ—Ä–≥–∏–∏: {energy}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if battle_type == "Unranked":
                    self._stats['unranked_battles'] += 1
                else:
                    self._stats['ranked_battles'] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è
                if battle_result.get('is_won', False):
                    self._stats['battles_won'] += 1
                else:
                    self._stats['battles_lost'] += 1
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ—è
                if 'logs' in battle_result:
                    analysis = self.analyze_battle_result(battle_result['logs'])
                    if settings.DEBUG_LOGGING:
                        logger.debug(f"{self.session_name} | –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ—è: {analysis}")
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–æ—è–º–∏ 5‚Äì36 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(uniform(5, 36))
            else:
                logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ–π, –ø—Ä–µ—Ä—ã–≤–∞–µ–º")
                # –ï—Å–ª–∏ –±–æ–π –Ω–µ —É–¥–∞–ª—Å—è –∏–∑-–∑–∞ rate limit - –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(uniform(10, 20))
                break
        
        if battles_fought > 0:
            logger.info(f"{self.session_name} | {self.EMOJI['success']} –ó–∞–≤–µ—Ä—à–µ–Ω–æ {battles_fought} {battle_type} –±–æ–µ–≤")
        else:
            logger.info(f"{self.session_name} | {self.EMOJI['warning']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ {battle_type} –±–æ—è")
    
    def print_session_stats(self, sleep_duration: int) -> None:
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º"""
        total_battles = self._stats['unranked_battles'] + self._stats['ranked_battles']
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
        total_refills = self._stats['unranked_refills'] + self._stats['ranked_refills']
        
        if total_battles > 0 or total_refills > 0:
            logger.info(f"{self.session_name} | {'='*50}")
            logger.info(f"{self.session_name} | üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–°–ò–ò:")
            logger.info(f"{self.session_name} | {'='*50}")
            
            if total_battles > 0:
                logger.info(f"{self.session_name} | {self.EMOJI['battle']} –í—Å–µ–≥–æ –±–æ–µ–≤: {total_battles}")
                logger.info(f"{self.session_name} |   ‚îú‚îÄ –û–±—ã—á–Ω—ã–µ –±–æ–∏: {self._stats['unranked_battles']}")
                logger.info(f"{self.session_name} |   ‚îî‚îÄ –†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –±–æ–∏: {self._stats['ranked_battles']}")
                logger.info(f"{self.session_name} | üèÜ –ü–æ–±–µ–¥—ã: {self._stats['battles_won']} | –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {self._stats['battles_lost']}")
            
            if total_refills > 0:
                logger.info(f"{self.session_name} | {self.EMOJI['energy']} –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —ç–Ω–µ—Ä–≥–∏–∏: {total_refills}")
                logger.info(f"{self.session_name} |   ‚îú‚îÄ –û–±—ã—á–Ω–∞—è: {self._stats['unranked_refills']}")
                logger.info(f"{self.session_name} |   ‚îî‚îÄ –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è: {self._stats['ranked_refills']}")
                logger.info(f"{self.session_name} | üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≥–µ–º–æ–≤ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {self._stats['total_gems_spent_on_refills']}")
            
            logger.info(f"{self.session_name} | üí∞ –ú–æ–Ω–µ—Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {self._stats['total_coins_earned']}")
            logger.info(f"{self.session_name} | üí∏ –ö–∞–º–Ω–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {self._stats['total_gems_earned']}")
            logger.info(f"{self.session_name} | ‚≠ê –†–µ–π—Ç–∏–Ω–≥ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {self._stats['total_rating_earned']}")
            logger.info(f"{self.session_name} | {'='*50}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–Ω–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        hours = sleep_duration // 3600
        minutes = (sleep_duration % 3600) // 60
        seconds = sleep_duration % 60
        
        if hours > 0:
            time_str = f"{hours}—á {minutes}–º {seconds}—Å"
        elif minutes > 0:
            time_str = f"{minutes}–º {seconds}—Å"
        else:
            time_str = f"{seconds}—Å"
        
        logger.info(f"{self.session_name} | {self.EMOJI['time']} –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ: —Å–æ–Ω –Ω–∞ {time_str}")
        logger.info(f"{self.session_name} | {'='*50}")
    
    def calculate_sleep_duration(self, unranked_energy: int, ranked_energy: int, 
                                next_unranked_energy_at: int, next_ranked_energy_at: int) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–Ω–∞ –¥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è 6 –µ–¥–∏–Ω–∏—Ü —ç–Ω–µ—Ä–≥–∏–∏.
        - –û–±—ã—á–Ω—ã–µ –±–æ–∏: –º–∞–∫—Å–∏–º—É–º 12, +1 –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞.
        - –†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –±–æ–∏: –º–∞–∫—Å–∏–º—É–º 6, +1 –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞.
        –ñ–¥–µ–º 6 –µ–¥–∏–Ω–∏—Ü –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —ç–Ω–µ—Ä–≥–∏–∏ - –∫–∞–∫–æ–π –Ω–∞–∫–æ–ø–∏—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ."""

        # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å 6+ —ç–Ω–µ—Ä–≥–∏–∏ - –ø—Ä–æ—Å—ã–ø–∞–µ–º—Å—è —Å—Ä–∞–∑—É
        if unranked_energy >= 6 or ranked_energy >= 6:
            return 60  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ - –Ω–∞—á–∏–Ω–∞–µ–º –±–æ–∏

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º time() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ Unix timestamp
        now_ts = int(time())

        def time_to_six_energy(current_energy: int, next_at: int, max_energy: int, interval_sec: int) -> int:
            target_energy = 6
            if current_energy >= target_energy:
                return 0  # –£–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏
            
            # –ù–µ –º–æ–∂–µ–º –Ω–∞–∫–æ–ø–∏—Ç—å 6, –µ—Å–ª–∏ –º–∞–∫—Å–∏–º—É–º –º–µ–Ω—å—à–µ
            actual_target = min(target_energy, max_energy)
            if current_energy >= actual_target:
                return 0
                
            needed_energy = actual_target - current_energy
            
            # –í—Ä–µ–º—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
            if next_at and next_at > now_ts:
                first_tick_time = next_at - now_ts
            else:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                first_tick_time = interval_sec
                
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–∫–∏ (–∫–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç 1 —ç–Ω–µ—Ä–≥–∏—é)
            remaining_ticks = max(0, needed_energy - 1)
            remaining_time = remaining_ticks * interval_sec
            
            total_time = first_tick_time + remaining_time
            
            if settings.DEBUG_LOGGING:
                logger.debug(f"[{self.session_name}] time_to_six_energy: current={current_energy}, "
                           f"target={target_energy}, needed={needed_energy}, "
                           f"next_at={next_at}, now={now_ts}, "
                           f"first_tick={first_tick_time}s, remaining_ticks={remaining_ticks}, "
                           f"total_time={total_time}s ({total_time//60}m {total_time%60}s)")
            
            return total_time

        # –í—Ä–µ–º—è –¥–æ 6 –µ–¥–∏–Ω–∏—Ü –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        # Unranked: +1 –∫–∞–∂–¥—ã–π —á–∞—Å (3600 —Å–µ–∫), –º–∞–∫—Å–∏–º—É–º 12
        unranked_six_time = time_to_six_energy(unranked_energy, next_unranked_energy_at, 12, 3600)
        # Ranked: +1 –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ (10800 —Å–µ–∫), –º–∞–∫—Å–∏–º—É–º 6  
        ranked_six_time = time_to_six_energy(ranked_energy, next_ranked_energy_at, 6, 10800)

        if settings.DEBUG_LOGGING:
            logger.debug(f"[{self.session_name}] Energy calculation: "
                       f"unranked={unranked_energy} (need {6-unranked_energy} more, {unranked_six_time}s), "
                       f"ranked={ranked_energy} (need {6-ranked_energy} more, {ranked_six_time}s)")

        # –ü—Ä–æ—Å—ã–ø–∞–µ–º—Å—è –∫–æ–≥–¥–∞ –ª—é–±–æ–π —Ç–∏–ø –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç 6 –µ–¥–∏–Ω–∏—Ü (–≤—ã–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
        sleep_time = min(unranked_six_time, ranked_six_time) + 30  # –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä
        return max(300, sleep_time)  # –ú–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç —Å–Ω–∞
    
    async def login(self, tg_web_data: str) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Mutant Gifts (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ BaseBot)"""
        return await self.authenticate(tg_web_data)
    
    async def run(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã Mutant Gifts –±–æ—Ç–∞"""
        if settings.DEBUG_LOGGING:
            logger.debug(f"[{self.session_name}] run: start initialize_session")
        if not await self.initialize_session():
            logger.error(f"[{self.session_name}] Failed to initialize session")
            raise InvalidSession("Failed to initialize session")
        
        random_delay = uniform(1, settings.SESSION_START_DELAY)
        logger.info(f"Bot will start in {int(random_delay)}s")
        if settings.DEBUG_LOGGING:
            logger.debug(f"[{self.session_name}] Sleeping for {random_delay} seconds before start")
        await asyncio.sleep(random_delay)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä —Å —É—á–µ—Ç–æ–º FIX_CERT
        proxy_conn: Dict[str, Any]
        if self._current_proxy:
            proxy_conn = {'connector': ProxyConnector.from_url(self._current_proxy)}
        else:
            proxy_conn = {}
            if settings.FIX_CERT:
                proxy_conn['connector'] = aiohttp.TCPConnector(ssl=False)
                self._ssl_disabled = True
        if settings.DEBUG_LOGGING:
            logger.debug(f"[{self.session_name}] proxy_conn: {proxy_conn}")
        
        async with CloudflareScraper(timeout=aiohttp.ClientTimeout(60), **proxy_conn) as http_client:
            self._http_client = http_client
            while True:
                try:
                    session_config = config_utils.get_session_config(self.session_name, CONFIG_PATH)
                    if settings.DEBUG_LOGGING:
                        logger.debug(f"[{self.session_name}] session_config: {session_config}")

                    # –î–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ–∫—Å–∏ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∞ –Ω–µ –∫–æ–Ω—Ñ–∏–≥ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏)
                    try:
                        full_accounts_config = config_utils.read_config_file(CONFIG_PATH)
                    except Exception:
                        full_accounts_config = {}
                    
                    if not await self.check_and_update_proxy(full_accounts_config):
                        logger.warning('Failed to find working proxy. Sleep 5 minutes.')
                        await asyncio.sleep(300)
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º tgWebAppData –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
                    tg_web_data = await self.get_tg_web_data()
                    if not await self.authenticate(tg_web_data):
                        logger.error(f"[{self.session_name}] Authentication failed")
                        raise InvalidSession("Authentication failed")

                    # –ü—Ä–æ—Ö–æ–¥–∏–º –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                    if self._is_first_run:
                        await self.perform_first_run_tutorial()

                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞
                    await self.process_bot_logic()
                    
                except InvalidSession as e:
                    logger.error(f"[{self.session_name}] InvalidSession: {e}")
                    if settings.DEBUG_LOGGING:
                        logger.debug(f"[{self.session_name}] InvalidSession details: {e}")
                    raise
                except (aiohttp.ServerTimeoutError, aiohttp.ClientTimeout, 
                        asyncio.TimeoutError, aiohttp.ClientConnectorError,
                        aiohttp.ClientOSError, aiohttp.ClientConnectionError) as network_error:
                    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ - –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ info/debug, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                    sleep_duration = uniform(30, 60)
                    logger.info(f"[{self.session_name}] –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {type(network_error).__name__}. "
                               f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {int(sleep_duration)}—Å")
                    if settings.DEBUG_LOGGING:
                        logger.debug(f"[{self.session_name}] –î–µ—Ç–∞–ª–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏: {network_error}")
                    await asyncio.sleep(sleep_duration)
                except Exception as error:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ - –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ
                    sleep_duration = uniform(60, 120)
                    logger.error(f"[{self.session_name}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {error}. "
                                f"–ó–∞—Å—ã–ø–∞–µ–º –Ω–∞ {int(sleep_duration)}—Å")
                    if settings.DEBUG_LOGGING:
                        logger.debug(f"[{self.session_name}] –î–µ—Ç–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {error}")
                    await asyncio.sleep(sleep_duration)
    
    async def claim_daily_streak(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—Ö–æ–¥"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫
            profile = await self.get_profile()
            if not profile or not isinstance(profile, dict):
                logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–¥ –∫–ª–µ–π–º–æ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã")
                return False
                
            daily_streak = profile.get('daily_streak', 0)
            can_claim = profile.get('can_claim_daily_streak', False)
            
            if not can_claim:
                logger.info(f"{self.session_name} | {self.EMOJI['info']} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {daily_streak} –¥–Ω–µ–π")
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
            response = await self.make_mutant_request(
                method="POST",
                url=f"{self._base_url}/apiv1/profile/claim_daily_streak",
                json={}
            )
            
            if response and response.get("success") is True:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–∏–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≥–µ–º–æ–≤
                updated_profile = await self.get_profile()
                if updated_profile and isinstance(updated_profile, dict):
                    new_streak = updated_profile.get('daily_streak', 0)
                    gems_before = profile.get('gems', 0)
                    gems_after = updated_profile.get('gems', 0)
                    gems_earned = gems_after - gems_before
                    
                    logger.info(f"{self.session_name} | {self.EMOJI['success']} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–µ–Ω–∞! –°—Ç—Ä–∏–∫: {new_streak} –¥–Ω–µ–π, –ø–æ–ª—É—á–µ–Ω–æ –≥–µ–º–æ–≤: {gems_earned}")
                else:
                    logger.info(f"{self.session_name} | {self.EMOJI['success']} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–µ–Ω–∞! –°—Ç—Ä–∏–∫: {daily_streak + 1} –¥–Ω–µ–π")
                return True
            else:
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É, response: {response}")
                return False
                
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã: {str(error)}")
            return False

    async def claim_referral_gems(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≥–µ–º–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≥–µ–º–æ–≤
            profile = await self.get_profile()
            if not profile or not isinstance(profile, dict):
                logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–¥ –∫–ª–µ–π–º–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≥–µ–º–æ–≤")
                return False
                
            claimable_gems = profile.get('claimable_referral_gems', 0)
            
            if claimable_gems <= 0:
                logger.info(f"{self.session_name} | {self.EMOJI['info']} –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≥–µ–º–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è")
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≥–µ–º–æ–≤
            response = await self.make_mutant_request(
                method="POST",
                url=f"{self._base_url}/apiv1/profile/claim_referral_gems"
            )
            
            if response and response.get("success") is True:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≥–µ–º–æ–≤
                updated_profile = await self.get_profile()
                if updated_profile and isinstance(updated_profile, dict):
                    gems_before = profile.get('gems', 0)
                    gems_after = updated_profile.get('gems', 0)
                    gems_earned = gems_after - gems_before
                    
                    logger.info(f"{self.session_name} | {self.EMOJI['success']} –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≥–µ–º—ã –ø–æ–ª—É—á–µ–Ω—ã! –ü–æ–ª—É—á–µ–Ω–æ: {gems_earned} –≥–µ–º–æ–≤")
                else:
                    logger.info(f"{self.session_name} | {self.EMOJI['success']} –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≥–µ–º—ã –ø–æ–ª—É—á–µ–Ω—ã! –û–∂–∏–¥–∞–ª–æ—Å—å: {claimable_gems} –≥–µ–º–æ–≤")
                return True
            else:
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≥–µ–º—ã, response: {response}")
                return False
                
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≥–µ–º–æ–≤: {str(error)}")
            return False
    
    async def get_activities(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
        try:
            response = await self.make_mutant_request(
                method="GET",
                url=f"{self._base_url}/apiv1/activities"
            )
            
            if response and "activities" in response:
                activities = response["activities"]
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | {self.EMOJI['info']} –ü–æ–ª—É—á–µ–Ω–æ {len(activities)} –∑–∞–¥–∞–Ω–∏–π")
                return activities
            else:
                logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è, response: {response}")
                return None
                
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π: {str(error)}")
            return None
    
    async def claim_activity(self, activity_id: str) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
        try:
            payload = {"id": activity_id}
            response = await self.make_mutant_request(
                method="POST",
                url=f"{self._base_url}/apiv1/activities/{activity_id}/claim",
                json=payload
            )
            
            if response and response.get("success") is True:
                logger.info(f"{self.session_name} | {self.EMOJI['success']} –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ {activity_id} –ø–æ–ª—É—á–µ–Ω–∞")
                return True
            else:
                if settings.DEBUG_LOGGING:
                    logger.debug(f"{self.session_name} | –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ {activity_id}, response: {response}")
                return False
                
        except Exception as error:
            logger.error(f"{self.session_name} | –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ {activity_id}: {str(error)}")
            return False
    
    async def process_activities(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥"""
        activities = await self.get_activities()
        if not activities:
            logger.warning(f"{self.session_name} | {self.EMOJI['warning']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π")
            return
        
        completed_activities = []
        for activity in activities:
            if not isinstance(activity, dict):
                continue
                
            activity_id = activity.get("id")
            current_progress = activity.get("current_progress", 0)
            target_progress = activity.get("target_progress", 1)
            reward_gems = activity.get("reward_gems", 0)
            activity_type = activity.get("type", "unknown")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ (current_progress >= target_progress)
            if current_progress >= target_progress and activity.get("status") != 30:
                completed_activities.append((activity_id, activity_type, reward_gems))
        
        if completed_activities:
            logger.info(f"{self.session_name} | {self.EMOJI['info']} –ù–∞–π–¥–µ–Ω–æ {len(completed_activities)} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            total_claimed = 0
            total_gems = 0
            for activity_id, activity_type, reward_gems in completed_activities:
                if await self.claim_activity(activity_id):
                    total_claimed += 1
                    total_gems += reward_gems
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(uniform(0.5, 1.5))
            
            if total_claimed > 0:
                logger.info(f"{self.session_name} | {self.EMOJI['success']} –ü–æ–ª—É—á–µ–Ω–æ {total_claimed} –Ω–∞–≥—Ä–∞–¥ –Ω–∞ —Å—É–º–º—É {total_gems} –≥–µ–º–æ–≤")
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
                await self.get_profile()
        else:
            if settings.DEBUG_LOGGING:
                logger.debug(f"{self.session_name} | {self.EMOJI['info']} –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
    


    async def process_bot_logic(self) -> None:
        """–ù–æ–≤–∞—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞ –¥–ª—è Mutant Gifts"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            if self._is_token_expired():
                logger.info(f"{self.session_name} | {self.EMOJI['warning']} –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                if not await self._restart_authorization():
                    logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                    return

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = await self.get_profile()
            if not profile:
                logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                return

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
            username = profile.get('username', 'N/A')
            gems = profile.get('gems', 0)
            coins = profile.get('coins', 0)
            ranked_energy = profile.get('ranked_energy', 0)
            unranked_energy = profile.get('unranked_energy', 0)
            claimable_referral_gems = profile.get('claimable_referral_gems', 0)
            daily_streak = profile.get('daily_streak', 0)
            can_claim_daily_streak = profile.get('can_claim_daily_streak', False)
            
            logger.info(f"{self.session_name} | {self.EMOJI['info']} –ü—Ä–æ—Ñ–∏–ª—å: {username}")
            logger.info(f"{self.session_name} | üíé –ì–µ–º—ã: {gems} | ü™ô –ú–æ–Ω–µ—Ç—ã: {coins}")
            logger.info(f"{self.session_name} | ‚ö° –≠–Ω–µ—Ä–≥–∏—è - –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è: {ranked_energy} | –û–±—ã—á–Ω–∞—è: {unranked_energy}")
            logger.info(f"{self.session_name} | üî• –°–µ—Ä–∏—è: {daily_streak} –¥–Ω–µ–π | –ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å: {can_claim_daily_streak}")
            
            if claimable_referral_gems > 0:
                logger.info(f"{self.session_name} | üë• –î–æ—Å—Ç—É–ø–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≥–µ–º–æ–≤: {claimable_referral_gems}")

            # 1. –ö–ª–µ–π–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–µ—Ä–∏–∏
            if can_claim_daily_streak and settings.CLAIM_DAILY_STREAK:
                await self.claim_daily_streak()
                await asyncio.sleep(uniform(1, 3))

            # 2. –ö–ª–µ–π–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≥–µ–º–æ–≤
            if claimable_referral_gems > 0:
                await self.claim_referral_gems()
                await asyncio.sleep(uniform(1, 3))

            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
            if settings.PROCESS_ACTIVITIES:
                await self.process_activities()
                await asyncio.sleep(uniform(1, 3))

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ –±–æ–µ–≤
            await self.process_mutant_gifts_logic()

        except InvalidSession as e:
            logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è: {e}")
            raise
        except Exception as e:
            logger.error(f"{self.session_name} | {self.EMOJI['error']} –û—à–∏–±–∫–∞ –≤ process_bot_logic: {e}")
            raise

    async def process_mutant_gifts_logic(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –¥–ª—è Mutant Gifts —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        
        –õ–æ–≥–∏–∫–∞:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –∫–∞—Ä—Ç
        2. –ü–†–ò–û–†–ò–¢–ï–¢: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Å–∫–∏ –∏ –∑–∞–±–∏—Ä–∞–µ–º –≥–µ–º—ã (–¥–ª—è —Ä–µ—Ñ–∏–ª–ª–æ–≤)
        3. –ë—å–µ–º –æ–±—ã—á–Ω—ã–µ –±–æ–∏
        4. –ë—å–µ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –±–æ–∏
        5. –î–µ–ª–∞–µ–º —Ä–µ—Ñ–∏–ª–ª –∑–∞ –≥–µ–º—ã (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ã–µ)
        6. –î–µ–ª–∞–µ–º –º—É—Ç–∞—Ü–∏–∏ –∑–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≥–µ–º—ã (—Å –∑–∞–ø–∞—Å–æ–º –Ω–∞ —Ä–µ—Ñ–∏–ª–ª—ã)
        7. –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª –∏–ª–∏ –∏–¥–µ–º —Å–ø–∞—Ç—å
        """
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –º—É—Ç–∞—Ü–∏–π –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        self._stats['mutations_performed'] = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if self._is_token_expired():
            logger.info(f"{self.session_name} | {self.EMOJI['warning']} –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            if not await self._restart_authorization():
                logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                return
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = await self.get_profile()
        
        if not profile or not isinstance(profile, dict):
            logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
            await asyncio.sleep(60)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        username = profile.get('username', 'Unknown')
        unranked_energy = profile.get('unranked_energy', 0)
        ranked_energy = profile.get('ranked_energy', 0)
        coins = profile.get('coins', 0)
        gems = profile.get('gems', 0)
        next_unranked_energy_at = profile.get('next_unranked_energy_at')
        next_ranked_energy_at = profile.get('next_ranked_energy_at')
        can_claim_daily_streak = profile.get('can_claim_daily_streak', False)
        has_claimable_activity = profile.get('has_claimable_activity', False)
        
        # –í—ã–≤–æ–¥–∏–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        logger.info(f"{self.session_name} | {self.EMOJI['character']} {username} | {self.EMOJI['energy']} {unranked_energy}({ranked_energy}) | üí∞ {coins} | üí∏ {gems}")
        
        # –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—Ö–æ–¥, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if can_claim_daily_streak:
            logger.info(f"{self.session_name} | {self.EMOJI['info']} –î–æ—Å—Ç—É–ø–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—Ö–æ–¥")
            if await self.claim_daily_streak():
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
                profile = await self.get_profile()
                if profile:
                    gems = profile.get('gems', gems)
                    logger.info(f"{self.session_name} | {self.EMOJI['success']} –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã. –ì–µ–º–æ–≤: {gems}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        if has_claimable_activity:
            logger.info(f"{self.session_name} | {self.EMOJI['info']} –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è")
            await self.process_activities()
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∑–∞–¥–∞–Ω–∏—è
            profile = await self.get_profile()
            if profile:
                gems = profile.get('gems', gems)
                logger.info(f"{self.session_name} | {self.EMOJI['success']} –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∑–∞–¥–∞–Ω–∏—è. –ì–µ–º–æ–≤: {gems}")
        elif settings.DEBUG_LOGGING:
            logger.debug(f"{self.session_name} | {self.EMOJI['info']} –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∑–∞–¥–∞–Ω–∏—è")
            # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            await self.process_activities()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∞–≤—Ç–æ-–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏ —Ä–∞—Å–ø—ã–ª–µ–Ω–∏—è
        all_characters = await self.get_characters()
        
        # –ê–≤—Ç–æ-–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –∫–∞—Ä—Ç –ø–æ —Ä–∞—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏
        if all_characters:
            best_pinned_ids = await self.ensure_best_pins(all_characters)
            logger.info(f"{self.session_name} | {self.EMOJI['character']} –ó–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –ª—É—á—à–∏–µ –∫–∞—Ä—Ç—ã: {len(best_pinned_ids)}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö pinned_characters
            profile = await self.get_profile()
            if profile:
                pinned_characters = profile.get('pinned_characters', [])
            else:
                pinned_characters = []
        else:
            pinned_characters = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(pinned_characters, list):
            logger.error(f"{self.session_name} | {self.EMOJI['error']} –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç pinned_characters: {type(pinned_characters).__name__}")
            pinned_characters = []
        
        if not pinned_characters:
            logger.warning(f"{self.session_name} | {self.EMOJI['warning']} –ù–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        else:
            logger.info(f"{self.session_name} | {self.EMOJI['character']} –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(pinned_characters)}")
        
        # –ê–≤—Ç–æ-—Ä–∞—Å–ø—ã–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –∫–∞—Ä—Ç (–ø–æ—Å–ª–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ª—É—á—à–∏—Ö)
        if all_characters:
            all_characters = await self.auto_disenchant_low_rarity(all_characters)
        
        # –ê–≤—Ç–æ-–º—É—Ç–∞—Ü–∏—è: –ø–æ–∫–∞ —Ö–≤–∞—Ç–∞–µ—Ç –≥–µ–º–æ–≤ –∏ –≤–∫–ª—é—á–µ–Ω–æ
        mutation_price_gems = self._get_mutation_gems_price(profile)
        if settings.AUTO_MUTATION and isinstance(gems, int) and gems >= max(1, mutation_price_gems or 100):
            logger.info(f"{self.session_name} | üß¨ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ-–º—É—Ç–∞—Ü–∏—é. –ì–µ–º–æ–≤: {gems}")
            mutations_count = 0
            while True:
                mutation_price = self._get_mutation_gems_price(profile) or 100
                if not isinstance(gems, int) or gems < mutation_price:
                    break
                new_char = await self.mutate_gems()
                if not new_char:
                    break
                mutations_count += 1
                gems -= mutation_price
                char_name = new_char.get('name', 'Unknown')
                char_rarity = new_char.get('rarity', 'Unknown')
                logger.info(f"{self.session_name} | üè† –ú—É—Ç–∞—Ü–∏—è #{mutations_count}: {char_name} ({char_rarity})")
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö pinned_characters
                updated_profile = await self.get_profile()
                if updated_profile:
                    profile = updated_profile
                    pinned_characters = profile.get('pinned_characters', [])
                await asyncio.sleep(1)
            
            if mutations_count > 0:
                logger.info(f"{self.session_name} | ‚ú® –í—ã–ø–æ–ª–Ω–µ–Ω–æ {mutations_count} –º—É—Ç–∞—Ü–∏–π! –û—Å—Ç–∞–ª–æ—Å—å –≥–µ–º–æ–≤: {gems}")
                
                # –ü–æ—Å–ª–µ –º—É—Ç–∞—Ü–∏–π –ø–µ—Ä–µ–∑–∞–∫—Ä–µ–ø–ª—è–µ–º –ª—É—á—à–∏–µ –∫–∞—Ä—Ç—ã
                all_characters = await self.get_characters()
                if all_characters:
                    best_pinned_ids = await self.ensure_best_pins(all_characters)
                    logger.info(f"{self.session_name} | {self.EMOJI['character']} –ü–µ—Ä–µ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –ª—É—á—à–∏–µ –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –º—É—Ç–∞—Ü–∏–π: {len(best_pinned_ids)}")
                    
                    # –†–∞—Å–ø—ã–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –º—É—Ç–∞—Ü–∏–π
                    all_characters = await self.auto_disenchant_low_rarity(all_characters)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    profile = await self.get_profile()
                    if profile:
                        pinned_characters = profile.get('pinned_characters', [])

        # –ê–≤—Ç–æ-—É–ª—É—á—à–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç, –ø—Ä–∏ –±–∞–ª–∞–Ω—Å–µ –≤—ã—à–µ MIN_COINS_BALANCE
        if settings.AUTO_UPGRADE and pinned_characters:
            updated_coins, updated_characters = await self.auto_upgrade_pinned(pinned_characters, coins)
            if updated_coins != coins:
                coins = updated_coins
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –ø—Ä–æ–∫–∞—á–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                updated_profile = await self.get_profile()
                if updated_profile:
                    profile = updated_profile
                    pinned_characters = profile.get('pinned_characters', [])

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–æ–µ–≤
        battles_history = await self.get_battles_history()
        if battles_history:
            if settings.DEBUG_LOGGING:
                logger.debug(f"{self.session_name} | –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –±–æ–µ–≤: {len(battles_history)} –±–æ–µ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ AUTO_BATTLE
        if settings.AUTO_BATTLE and pinned_characters:
            if unranked_energy > 0:
                await self.process_battles(pinned_characters, "Unranked", unranked_energy)
            if ranked_energy > 0:
                await self.process_battles(pinned_characters, "Ranked", ranked_energy)
            
            # –ü–æ—Å–ª–µ –±–æ–µ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
            if settings.AUTO_REFILL_ENERGY:
                energy_type = settings.REFILL_ENERGY_TYPE.lower()
                refilled_any = False
                
                if energy_type == "both":
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞ —ç–Ω–µ—Ä–≥–∏–∏
                    if unranked_energy == 0:
                        refill_success = await self.smart_energy_refill(profile, "unranked")
                        if refill_success:
                            refilled_any = True
                    
                    if ranked_energy == 0:
                        refill_success = await self.smart_energy_refill(profile, "ranked")
                        if refill_success:
                            refilled_any = True
                            
                elif energy_type in ["ranked", "unranked"]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —ç–Ω–µ—Ä–≥–∏—é –ø–æ—Å–ª–µ –±–æ–µ–≤
                    current_energy = unranked_energy if energy_type == "unranked" else ranked_energy
                    if current_energy == 0:  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è –∫–æ–Ω—á–∏–ª–∞—Å—å
                        refill_success = await self.smart_energy_refill(profile, energy_type)
                        if refill_success:
                            refilled_any = True
                            
                # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–∏
                if refilled_any:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    updated_profile_after_refill = await self.get_profile()
                    if updated_profile_after_refill:
                        logger.info(f"{self.session_name} | {self.EMOJI['success']} –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–∏.")
                        return  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Ü–∏–∫–ª–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –±–æ–µ–≤

        # –®–ê–ì 5: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–∏–ª–ª–∞ –ø–µ—Ä–µ–¥ –º—É—Ç–∞—Ü–∏–µ–π (–µ—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è —Ä–∞–≤–Ω–∞ 0)
        if settings.AUTO_REFILL_ENERGY:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            current_profile_check = await self.get_profile()
            if current_profile_check:
                current_unranked = current_profile_check.get('unranked_energy', 0)
                current_ranked = current_profile_check.get('ranked_energy', 0)
                
                # –ï—Å–ª–∏ –ª—é–±–∞—è —ç–Ω–µ—Ä–≥–∏—è —Ä–∞–≤–Ω–∞ 0 - –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ—Ñ–∏–ª–ª
                if current_unranked == 0 or current_ranked == 0:
                    energy_type = settings.REFILL_ENERGY_TYPE.lower()
                    refilled_any = False
                    
                    if energy_type == "both":
                        if current_unranked == 0:
                            refill_success = await self.smart_energy_refill(current_profile_check, "unranked")
                            if refill_success:
                                refilled_any = True
                        
                        if current_ranked == 0:
                            refill_success = await self.smart_energy_refill(current_profile_check, "ranked")
                            if refill_success:
                                refilled_any = True
                                
                    elif energy_type == "unranked" and current_unranked == 0:
                        refill_success = await self.smart_energy_refill(current_profile_check, "unranked")
                        if refill_success:
                            refilled_any = True
                            
                    elif energy_type == "ranked" and current_ranked == 0:
                        refill_success = await self.smart_energy_refill(current_profile_check, "ranked")
                        if refill_success:
                            refilled_any = True
                    
                    # –ï—Å–ª–∏ —Ä–µ—Ñ–∏–ª–ª –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Ü–∏–∫–ª–∞
                    if refilled_any:
                        logger.info(f"{self.session_name} | {self.EMOJI['success']} –≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥ –º—É—Ç–∞—Ü–∏–µ–π! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–∏.")
                        return

        # –®–ê–ì 6: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º—É—Ç–∞—Ü–∏—è –∑–∞ –≥–µ–º—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞–ø–∞—Å –≥–µ–º–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ—Ñ–∏–ª–ª–∞)
        if settings.AUTO_MUTATION:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Ç–∞—Ü–∏–π –∑–∞ —Ü–∏–∫–ª
            if settings.MAX_MUTATIONS_PER_CYCLE > 0 and self._stats['mutations_performed'] >= settings.MAX_MUTATIONS_PER_CYCLE:
                logger.info(f"{self.session_name} | üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º—É—Ç–∞—Ü–∏–π –∑–∞ —Ü–∏–∫–ª: {self._stats['mutations_performed']}/{settings.MAX_MUTATIONS_PER_CYCLE}")
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≥–µ–º–æ–≤
                current_profile = await self.get_profile()
                if current_profile:
                    gems = current_profile.get('gems', gems)
                    unranked_energy = current_profile.get('unranked_energy', unranked_energy)
                    ranked_energy = current_profile.get('ranked_energy', ranked_energy)
                
                mutation_price = self._get_mutation_gems_price(current_profile or profile)

                # --- NEW LOGIC: Calculate safety margin for next refill ---
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–º—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ñ–∏–ª–ª –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —ç–Ω–µ—Ä–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å —Ä–∞–≤–µ–Ω 0,
                # –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ settings.MAX_ENERGY_REFILLS.
                safety_margin = 0

                # 1. Safety for Ranked Refill
                if ranked_energy == 0 and self._stats['ranked_refills'] < settings.MAX_ENERGY_REFILLS:
                    next_ranked_cost = profile.get('refill_price_ranked_gems', 120)
                    safety_margin = max(safety_margin, next_ranked_cost)

                # 2. Safety for Unranked Refill
                if unranked_energy == 0 and self._stats['unranked_refills'] < settings.MAX_ENERGY_REFILLS:
                    next_unranked_cost = profile.get('refill_price_unranked_gems', 60)
                    # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –¥–≤—É—Ö, —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –¥–æ—Ä–æ–≥–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–µ—Ñ–∏–ª–ª.
                    safety_margin = max(safety_margin, next_unranked_cost)

                required_gems = mutation_price + safety_margin

                if mutation_price > 0 and gems >= required_gems:
                    remaining_mutations = settings.MAX_MUTATIONS_PER_CYCLE - self._stats['mutations_performed'] if settings.MAX_MUTATIONS_PER_CYCLE > 0 else "‚àû"
                    logger.info(f"{self.session_name} | üß¨ –í—ã–ø–æ–ª–Ω—è–µ–º –º—É—Ç–∞—Ü–∏—é –∑–∞ {mutation_price} –≥–µ–º–æ–≤. –ó–∞–ø–∞—Å –Ω–∞ —Ä–µ—Ñ–∏–ª–ª: {safety_margin} –≥–µ–º–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å –º—É—Ç–∞—Ü–∏–π: {remaining_mutations}")
                    mutation_result = await self.mutate_gems()
                    if mutation_result:
                        self._stats['mutations_performed'] += 1
                        char_name = mutation_result.get('name', 'Unknown')
                        char_rarity = mutation_result.get('rarity', 'Unknown')
                        logger.info(f"{self.session_name} | üéâ –ü–æ–ª—É—á–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {char_name} ({char_rarity}). –ú—É—Ç–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self._stats['mutations_performed']}")
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                        characters = await self.get_characters() or characters
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –º—É—Ç–∞—Ü–∏–∏
                        profile = await self.get_profile() or profile
                        gems = profile.get('gems', 0) if profile else 0
                else:
                    if settings.DEBUG_LOGGING or mutation_price > 0:
                        if mutation_price > 0:
                            logger.info(f"{self.session_name} | üö´ –û—Ç–º–µ–Ω–∞ –º—É—Ç–∞—Ü–∏–∏: {gems} –≥–µ–º–æ–≤ < {required_gems} (—Ü–µ–Ω–∞ {mutation_price} + –∑–∞–ø–∞—Å {safety_margin})")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –±–æ–µ–≤
        updated_profile = await self.get_profile()
        if updated_profile:
            unranked_energy = updated_profile.get('unranked_energy', 0)
            ranked_energy = updated_profile.get('ranked_energy', 0)
            next_unranked_energy_at = updated_profile.get('next_unranked_energy_at')
            next_ranked_energy_at = updated_profile.get('next_ranked_energy_at')
            logger.info(f"{self.session_name} | {self.EMOJI['info']} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: –æ–±—ã—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è {unranked_energy}, —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è {ranked_energy}")
        else:
            logger.warning(f"{self.session_name} | {self.EMOJI['warning']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ—Å–ª–µ –±–æ–µ–≤
        logger.info(f"{self.session_name} | {self.EMOJI['info']} –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –±–æ–µ–≤: –æ–±—ã—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è {unranked_energy}, —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è {ranked_energy}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ª—é–±–∞—è —ç–Ω–µ—Ä–≥–∏—è - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–∏ –±–µ–∑ —Å–Ω–∞
        if unranked_energy > 0 or ranked_energy > 0:
            logger.info(f"{self.session_name} | {self.EMOJI['energy']} –≠–Ω–µ—Ä–≥–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞! –û–±—ã—á–Ω–∞—è: {unranked_energy}, –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è: {ranked_energy}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–∏!")
            return  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Ü–∏–∫–ª–∞ –±–µ–∑ —Å–Ω–∞
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ int –¥–ª—è timestamp
        next_unranked_timestamp = int(next_unranked_energy_at) if next_unranked_energy_at else 0
        next_ranked_timestamp = int(next_ranked_energy_at) if next_ranked_energy_at else 0
        
        sleep_duration = self.calculate_sleep_duration(
            unranked_energy, ranked_energy, 
            next_unranked_timestamp, next_ranked_timestamp
        )
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∂–¥–µ–º –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
        self.print_session_stats(sleep_duration)
        
        # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏
        logger.info(f"{self.session_name} | {self.EMOJI['info']} –ù–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –±–æ–µ–≤, –∑–∞—Å—ã–ø–∞–µ–º –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        await asyncio.sleep(sleep_duration)



async def run_tapper(tg_client: UniversalTelegramClient):
    # –ó–∞–ø—É—Å–∫–∞–µ–º MutantGiftsBot
    bot = MutantGiftsBot(tg_client=tg_client)
    try:
        await bot.run()
    except InvalidSession as e:
        logger.error(f"Invalid Session: {e}")
        raise
